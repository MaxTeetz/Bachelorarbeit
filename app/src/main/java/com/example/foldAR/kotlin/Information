Gibt die Position in Relation zur Welt in Metern an
val anchor1 = renderer.wrappedAnchors[0].anchor

val pos1 = anchor1.pose.translation[0].toString()
val pos2 = anchor1.pose.translation[1].toString()
val pos3 = anchor1.pose.translation[2].toString()

//Gibt die Rotation in Bezug zur X-Achse an -> gilt auch für y und z
val pos1 = anchor1.pose.xAxis[0]
val pos2 = anchor1.pose.xAxis[1]
val pos3 = anchor1.pose.xAxis[2]




CameraX: 0.86079645 -- -0.49217987 -- 0.12957035
CameraX: 0.104142815 -- -0.5027502 -- -0.85813546
CameraX: -0.8718078 -- -0.47658575 -- -0.11321169
CameraX: -0.0691262 -- -0.47776225 -- 0.8757651
CameraX: 0.8781603 -- -0.43539965 -- 0.19814548



CameraZ: 0.485919 -- 0.8704818 -- 0.07838422
CameraZ: 0.057237804 -- 0.8644269 -- -0.49948978
CameraZ: -0.47300053 -- 0.8791239 -- -0.058407012
CameraZ: -0.0544807 -- 0.87836283 -- 0.4748792
CameraZ: 0.42646587 -- 0.90020853 -- 0.08804175

nächste Schritte:
                  A)
                  -Position der Kamera bestimmen
                  -von dort aus ein imaginäres Objekt bewegen
                  -Position nach Bewegung mit realen Objekt verrechnen

                  B)
                  -Position der Kamera bestimmen
                  -von dort aus ein imaginäres Objekt bewegen
                  -Ausrichtung der Kamera auf x und z Achse bestimmen
                  -Objekt im kreis rotieren bis ausrichtung der Kamera erreicht ist
                  -Position nach Bewegung mit realen Objekt verrechnen



${camera.pose.yAxis[1]} tilt left/right -> normal 0 //${camera.pose.xAxis[1]} tilt left/right normal -1
${camera.pose.zAxis[1]}  tilt front/back -> normal 0 //${camera.pose.xAxis[1]} tilt front/back#ä normal -1

Clockwise   xAchse      zAchse
0°           1  0  0     0  0  1
90°          0  0  1    -1  0  0
180°        -1  0  0     0  0 -1
270°         0  0 -1     1  0  0

clockwise
val X1 = cos(rotation) * x + sin(rotation) * Z
val Z1 =-sin(rotation) * x + cos(rotation) * Z

counterclockwise
val X1 = cos(rotation) * x - sin(rotation) * Z
val Z1 = sin(rotation) * x + cos(rotation) * Z

1)Place Objects
2)Move Objects
3)Switch Mode
4)Move Object height
5)Map Objects
6)Move Objects on other Fragment
7)Change Scale
8)Delete Object
9)Select new Object
10)Delete all Objects


//Database
User (id, name)
   └── Scenario (id, userId, name)
         └── Test Case (id, scenarioId, name)
               └── Test Case Data (id, testCaseId, cameraPosition, startTime, endTime, clicks)


Logic

Alle Daten einmal beim App Start auslesen und danach in temporären Variablen speichern -> verringert Leseoperationen
-> nach Test temporäre Variablen updaten, in DB speichern und danach Logik entscheiden

                                        1!
App Starten -> Nutzer Existier nicht -> Nutzer anlegen -> Scenario anlegen -> Testcase anlegen    ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
           └──Nutzer existiert -> Fertig -> Neuer Benutzer -> Gleich wie Benutzer existiert nicht                                                                                                                                                                                |
                              └── Nicht fertig -> Gucken in welchem Scenario er ist -> Scenario vorhanden -> TestCase vorhanden -> TestCase fertig -> Welcher Testcase ist es -> Letzter im Scenario -> Nicht letztes Scenario -> Neues Scenario ────────────────────────────────|
                                                                                   |                      |                     |                                               |                   └── Letztes Scenario -> Benutzer fertig und neuer Benutzer -> siehe 1        |
                                                                                   |                      |                     |                                               └── Nicht letzter im Scenario -> Nächsten TestCase starten im Scenario ──────────────────────────|
                                                                                   |                      |                     └── TestCase nicht fertig -> DataSet für Testcase löschen und diesen neu starten  ───────────────────────────────────────────────────────────────|
                                                                                   |                      └── TestCase nicht vorhanden -> neuen für Scenario anlegen ────────────────────────────────────────────────────────────────────────────────────────────────────────────└── UI updaten und TestCase mit Daten füllen
                                                                                   |
                                                                                   └── Scenario nicht vorhanden -> Nutzer löschen und neu anlegen lassen -> siehe 1!

Nutzer gesetzt -> Scenario gesetzt -> TestCase gesetzt -> Test starten und Daten speichern
